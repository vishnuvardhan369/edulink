import React from 'react';\nimport { useWebRTC } from '../hooks/useWebRTC';\nimport { useAuth } from '../hooks/useAuth';\n\nconst WebRTCTest = () => {\n    const { user } = useAuth();\n    const {\n        localStream,\n        remoteStream,\n        inCall,\n        callType,\n        incomingCall,\n        isConnecting,\n        startCall,\n        answerCall,\n        declineCall,\n        endCall\n    } = useWebRTC(user);\n\n    // Test with a dummy target user ID - replace with actual user ID\n    const testTargetUserId = 'test-user-123';\n    const testConversationId = 'test-conversation-456';\n\n    return (\n        <div style={{ padding: '20px', border: '2px solid #007bff', margin: '20px', borderRadius: '8px' }}>\n            <h2>üß™ WebRTC Test Component</h2>\n            \n            <div style={{ marginBottom: '20px' }}>\n                <h3>Status</h3>\n                <p>User ID: {user?.uid || 'Not logged in'}</p>\n                <p>In Call: {inCall ? '‚úÖ Yes' : '‚ùå No'}</p>\n                <p>Call Type: {callType || 'None'}</p>\n                <p>Connecting: {isConnecting ? '‚è≥ Yes' : '‚ùå No'}</p>\n            </div>\n\n            <div style={{ marginBottom: '20px' }}>\n                <h3>Test Controls</h3>\n                <button \n                    onClick={() => startCall(testConversationId, 'audio', testTargetUserId)}\n                    disabled={inCall || !user}\n                    style={{ margin: '5px', padding: '10px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '4px' }}\n                >\n                    üéµ Test Audio Call\n                </button>\n                \n                <button \n                    onClick={() => startCall(testConversationId, 'video', testTargetUserId)}\n                    disabled={inCall || !user}\n                    style={{ margin: '5px', padding: '10px', backgroundColor: '#007bff', color: 'white', border: 'none', borderRadius: '4px' }}\n                >\n                    üìπ Test Video Call\n                </button>\n                \n                <button \n                    onClick={() => startCall(testConversationId, 'screen', testTargetUserId)}\n                    disabled={inCall || !user}\n                    style={{ margin: '5px', padding: '10px', backgroundColor: '#6f42c1', color: 'white', border: 'none', borderRadius: '4px' }}\n                >\n                    üñ•Ô∏è Test Screen Share\n                </button>\n                \n                <button \n                    onClick={endCall}\n                    disabled={!inCall}\n                    style={{ margin: '5px', padding: '10px', backgroundColor: '#dc3545', color: 'white', border: 'none', borderRadius: '4px' }}\n                >\n                    üìû End Call\n                </button>\n            </div>\n\n            {incomingCall && (\n                <div style={{ backgroundColor: '#f8f9fa', padding: '15px', borderRadius: '8px', marginBottom: '20px', border: '1px solid #dee2e6' }}>\n                    <h3>üìû Incoming Call</h3>\n                    <p>From: {incomingCall.callerId}</p>\n                    <p>Type: {incomingCall.type}</p>\n                    <button \n                        onClick={answerCall}\n                        style={{ margin: '5px', padding: '10px', backgroundColor: '#28a745', color: 'white', border: 'none', borderRadius: '4px' }}\n                    >\n                        ‚úÖ Answer\n                    </button>\n                    <button \n                        onClick={declineCall}\n                        style={{ margin: '5px', padding: '10px', backgroundColor: '#dc3545', color: 'white', border: 'none', borderRadius: '4px' }}\n                    >\n                        ‚ùå Decline\n                    </button>\n                </div>\n            )}\n\n            <div style={{ display: 'flex', gap: '20px' }}>\n                <div style={{ flex: 1 }}>\n                    <h3>üìπ Local Stream</h3>\n                    {localStream ? (\n                        <video \n                            ref={(video) => {\n                                if (video && localStream) {\n                                    video.srcObject = localStream;\n                                }\n                            }}\n                            autoPlay \n                            muted \n                            playsInline\n                            style={{ width: '100%', maxWidth: '400px', backgroundColor: '#000', borderRadius: '8px' }}\n                        />\n                    ) : (\n                        <div style={{ width: '100%', height: '200px', backgroundColor: '#6c757d', display: 'flex', alignItems: 'center', justifyContent: 'center', color: 'white', borderRadius: '8px' }}>\n                            No local stream\n                        </div>\n                    )}\n                </div>\n                \n                <div style={{ flex: 1 }}>\n                    <h3>üì∫ Remote Stream</h3>\n                    {remoteStream ? (\n                        <video \n                            ref={(video) => {\n                                if (video && remoteStream) {\n                                    video.srcObject = remoteStream;\n                                }\n                            }}\n                            autoPlay \n                            playsInline\n                            style={{ width: '100%', maxWidth: '400px', backgroundColor: '#000', borderRadius: '8px' }}\n                        />\n                    ) : (\n                        <div style={{ width: '100%', height: '200px', backgroundColor: '#6c757d', display: 'flex', alignItems: 'center', justifyContent: 'center', color: 'white', borderRadius: '8px' }}>\n                            No remote stream\n                        </div>\n                    )}\n                </div>\n            </div>\n\n            <div style={{ marginTop: '20px', fontSize: '12px', color: '#6c757d' }}>\n                <p><strong>üîß Debug Info:</strong></p>\n                <p>‚Ä¢ Open browser console to see WebRTC logs</p>\n                <p>‚Ä¢ TURN server: relay1.expressturn.com:3480</p>\n                <p>‚Ä¢ For real testing, update testTargetUserId with actual user ID</p>\n                <p>‚Ä¢ Audio calls, video calls, and screen sharing should work through TURN server</p>\n            </div>\n        </div>\n    );\n};\n\nexport default WebRTCTest;